{"version":3,"file":"static/js/976.49d8e7f9.chunk.js","mappings":"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","sources":["components/Input/Input.jsx","components/ContactForm/ContctForm.styled.jsx","components/ContactForm/ContactForm.jsx","pages/Home.jsx","redux/contacts/selectors.js"],"sourcesContent":["import { TextField } from '@mui/material';\nimport { useField } from 'formik';\nimport React from 'react';\n\nexport function Input({ ...otherProps }) {\n  const [field] = useField(otherProps);\n\n  return <TextField {...field} {...otherProps} />;\n}\n","import styled from '@emotion/styled';\nimport { ErrorMessage } from 'formik';\n\nexport const ValidationError = styled(ErrorMessage)`\n  font-size: 12px;\n  color: red;\n`;\n","import { Formik, Form } from 'formik';\nimport * as yup from 'yup';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectContacts } from 'redux/contacts/selectors';\nimport { addContact } from 'redux/contacts/operations';\nimport { Input } from 'components/Input/Input';\nimport { ValidationError } from './ContctForm.styled';\nimport { Button, Stack } from '@mui/material';\n\nconst initialValues = {\n  name: '',\n  number: '',\n};\n\nconst validationSchema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    )\n    .required(),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    )\n    .required(),\n});\n\nexport function ContactForm() {\n  const dispatch = useDispatch();\n  const contacts = useSelector(selectContacts);\n\n  const handleSubmit = (newContact, { resetForm }) => {\n    const isRepeat = contacts.find(contact => contact.name === newContact.name);\n\n    if (isRepeat) {\n      return alert(`${newContact.name} is already in your contacts`);\n    } else {\n      dispatch(addContact(newContact));\n    }\n\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={initialValues}\n      validationSchema={validationSchema}\n      onSubmit={handleSubmit}\n    >\n      <Form>\n        <Stack\n          spacing={1}\n          sx={{\n            minWidth: '280px',\n            width: '400px',\n          }}\n        >\n          <label>\n            <Input\n              sx={{ width: '100%' }}\n              size=\"small\"\n              label=\"Name\"\n              variant=\"outlined\"\n              type=\"text\"\n              name=\"name\"\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n              title=\"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n              required\n            />\n            <ValidationError name=\"name\" component=\"div\" />\n          </label>\n          <label>\n            <Input\n              sx={{ width: '100%' }}\n              size=\"small\"\n              label=\"Number\"\n              variant=\"outlined\"\n              type=\"tel\"\n              name=\"number\"\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n              title=\"Phone number must be digits and can contain spaces, dashes, parentheses and can start with +\"\n              required\n            />\n            <ValidationError name=\"number\" component=\"div\" />\n          </label>\n          <Button\n            variant=\"contained\"\n            sx={{ my: 0, color: 'white', display: 'block' }}\n            type=\"submit\"\n          >\n            Add contact\n          </Button>\n        </Stack>\n      </Form>\n    </Formik>\n  );\n}\n","import { Box, Button, Container, Typography } from '@mui/material';\nimport { ContactForm } from 'components/ContactForm/ContactForm';\nimport { useSelector } from 'react-redux';\nimport { selectIsLoggedIn } from 'redux/auth/selectors';\nimport * as S from 'components/Layout/Layout.styled';\n\nexport default function Home() {\n  const isLoggedIn = useSelector(selectIsLoggedIn);\n  return (\n    <Container maxWidth=\"xl\">\n      <div>\n        <Box\n          sx={{\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            padding: '100px 0',\n          }}\n        >\n          <Typography\n            variant=\"h1\"\n            align=\"center\"\n            fontWeight={700}\n            fontSize={64}\n            width={'60%'}\n          >\n            {isLoggedIn\n              ? 'Hello, you can create a new contact here'\n              : 'Hello, you can create a contact book here'}\n          </Typography>\n        </Box>\n\n        <Box\n          sx={{\n            display: 'flex',\n            justifyContent: 'center',\n          }}\n        >\n          {isLoggedIn ? (\n            <ContactForm btnText={'Add contact'} />\n          ) : (\n            <S.Link to=\"/signup\">\n              <Button variant=\"contained\" size=\"large\">\n                Create\n              </Button>\n            </S.Link>\n          )}\n        </Box>\n      </div>\n    </Container>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter);\n    });\n  }\n);\n"],"names":["Input","otherProps","useField","field","ValidationError","styled","ErrorMessage","initialValues","name","number","validationSchema","yup","shape","matches","required","ContactForm","dispatch","useDispatch","contacts","useSelector","selectContacts","onSubmit","newContact","resetForm","find","contact","alert","addContact","Stack","spacing","sx","minWidth","width","I","size","label","variant","type","pattern","title","component","Button","my","color","display","Home","isLoggedIn","selectIsLoggedIn","Container","maxWidth","Box","flexDirection","justifyContent","alignItems","padding","Typography","align","fontWeight","fontSize","btnText","to","state","items","selectIsLoading","isLoading","selectError","error","selectFilter","filter","selectFilteredContacts","createSelector","toLowerCase","includes"],"sourceRoot":""}