{"version":3,"file":"static/js/724.4ab860a7.chunk.js","mappings":"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","sources":["components/Filter/Filter.jsx","services/stringAvatar.js","components/ContactList/ContactList.jsx","components/Loader/Loader.jsx","pages/Contacts.jsx","redux/contacts/selectors.js"],"sourcesContent":["import { useDispatch, useSelector } from 'react-redux';\nimport { setFilter } from 'redux/filter/filterSlice';\nimport { selectFilter } from 'redux/contacts/selectors';\nimport { TextField } from '@mui/material';\n\nexport const Filter = () => {\n  const dispatch = useDispatch();\n  const filter = useSelector(selectFilter);\n\n  const changeFilter = e => {\n    dispatch(setFilter(e.target.value.toLowerCase()));\n  };\n\n  return (\n    <TextField\n      id=\"outlined-basic\"\n      label=\"Filter contacts by name\"\n      variant=\"outlined\"\n      size=\"small\"\n      type=\"text\"\n      value={filter}\n      onChange={changeFilter}\n      sx={{ minWidth: '300px', maxWidth: '500px', width: '100%' }}\n    />\n  );\n};\n","function stringToColor(string) {\n  let hash = 0;\n  let i;\n\n  /* eslint-disable no-bitwise */\n  for (i = 0; i < string.length; i += 1) {\n    hash = string.charCodeAt(i) + ((hash << 5) - hash);\n  }\n\n  let color = '#';\n\n  for (i = 0; i < 3; i += 1) {\n    const value = (hash >> (i * 8)) & 0xff;\n    color += `00${value.toString(16)}`.slice(-2);\n  }\n  /* eslint-enable no-bitwise */\n\n  return color;\n}\n\nexport function stringAvatar(name) {\n  return {\n    sx: {\n      bgcolor: stringToColor(name),\n    },\n    // children: `${name.split(' ')[0][0]}${name.split(' ')[1][0]}`,\n  };\n}\n","import PropTypes from 'prop-types';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { selectFilteredContacts } from 'redux/contacts/selectors';\nimport { deleteContact } from 'redux/contacts/operations';\nimport {\n  Avatar,\n  IconButton,\n  List,\n  ListItem,\n  ListItemAvatar,\n  ListItemText,\n  Typography,\n} from '@mui/material';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { stringAvatar } from 'services/stringAvatar';\n\nexport const ContactList = () => {\n  const dispatch = useDispatch();\n  const filteredContacts = useSelector(selectFilteredContacts);\n\n  return (\n    <List\n      sx={{\n        display: 'flex',\n        flexDirection: 'column',\n        gap: '12px',\n      }}\n    >\n      {filteredContacts.map(({ id, name, number }) => {\n        return (\n          <ListItem\n            key={id}\n            sx={{\n              maxWidth: '500px',\n              minWidth: '300px',\n            }}\n            secondaryAction={\n              <IconButton\n                edge=\"end\"\n                aria-label=\"delete\"\n                data-id={id}\n                onClick={() => dispatch(deleteContact(id))}\n              >\n                <DeleteIcon fontSize=\"large\" />\n              </IconButton>\n            }\n          >\n            <ListItemAvatar>\n              <Avatar sx={{ width: 56, height: 56 }} {...stringAvatar(name)}>\n                {name[0]}\n              </Avatar>\n            </ListItemAvatar>\n            <ListItemText>\n              <Typography variant=\"subtitle2\" fontWeight={500} fontSize={24}>\n                {name}\n              </Typography>\n              <Typography\n                variant=\"subtitle2\"\n                fontWeight={500}\n                fontSize={20}\n                color={'GrayText'}\n              >\n                {number}\n              </Typography>\n            </ListItemText>\n          </ListItem>\n        );\n      })}\n    </List>\n  );\n};\n\nContactList.propTypes = {\n  filteredContacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { MutatingDots } from 'react-loader-spinner';\n\nexport const Loader = () => (\n  <MutatingDots\n    height=\"100\"\n    width=\"100\"\n    color=\"#eac645\"\n    secondaryColor=\"#1f0592\"\n    radius=\"12.5\"\n    ariaLabel=\"mutating-dots-loading\"\n    wrapperStyle={{ justifyContent: 'center' }}\n    wrapperClass=\"\"\n    visible={true}\n  />\n);\n","import React, { useEffect } from 'react';\nimport { Filter } from '../components/Filter/Filter';\nimport { ContactList } from 'components/ContactList/ContactList';\nimport { Loader } from 'components/Loader/Loader';\nimport { useDispatch, useSelector } from 'react-redux';\nimport {\n  selectContacts,\n  selectError,\n  selectIsLoading,\n} from 'redux/contacts/selectors';\nimport { fetchContacts } from 'redux/contacts/operations';\nimport { Container, Typography } from '@mui/material';\n\nexport default function Contacts() {\n  const contacts = useSelector(selectContacts);\n  const isLoading = useSelector(selectIsLoading);\n  const error = useSelector(selectError);\n\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container maxWidth=\"xl\">\n      <Typography variant=\"h2\" ml={4} mt={2} sx={{ fontWeight: 500 }}>\n        Your contacts\n      </Typography>\n      <Filter />\n      {isLoading && <Loader />}\n      {error && <p>{error}</p>}\n      {contacts.length > 0 && <ContactList />}\n    </Container>\n  );\n}\n","import { createSelector } from '@reduxjs/toolkit';\n\nexport const selectContacts = state => state.contacts.items;\nexport const selectIsLoading = state => state.contacts.isLoading;\nexport const selectError = state => state.contacts.error;\nexport const selectFilter = state => state.filter;\n\nexport const selectFilteredContacts = createSelector(\n  [selectContacts, selectFilter],\n  (contacts, filter) => {\n    return contacts.filter(contact => {\n      return contact.name.toLowerCase().includes(filter);\n    });\n  }\n);\n"],"names":["Filter","dispatch","useDispatch","filter","useSelector","selectFilter","TextField","id","label","variant","size","type","value","onChange","e","setFilter","target","toLowerCase","sx","minWidth","maxWidth","width","stringToColor","string","i","hash","length","charCodeAt","color","toString","slice","stringAvatar","name","bgcolor","ContactList","filteredContacts","selectFilteredContacts","List","display","flexDirection","gap","map","number","ListItem","secondaryAction","IconButton","edge","onClick","deleteContact","Delete","fontSize","ListItemAvatar","Avatar","height","ListItemText","Typography","fontWeight","Loader","secondaryColor","radius","ariaLabel","wrapperStyle","justifyContent","wrapperClass","visible","Contacts","contacts","selectContacts","isLoading","selectIsLoading","error","selectError","useEffect","fetchContacts","Container","ml","mt","state","items","createSelector","contact","includes"],"sourceRoot":""}